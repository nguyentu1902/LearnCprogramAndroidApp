<resources>
    <string name="app_name">Ccode</string>
    <!-- TODO: Remove or change this placeholder text -->

    <!--    tiêu đề toolbar study-->
    <string name="titleBCInputOutput">Nhập - Xuất cơ bản</string>
    <string name="titleBCDataType">Kiểu dữ liệu - Biến</string>
    <string name="titleBCOpertor">Toán tử phổ biến</string>
    <string name="titleBCCondition">Cấu trúc rẽ nhánh</string>
    <string name="titleBCLoop1">Vòng lặp (phần 1)</string>
    <string name="titleBCLoop2">Vòng lặp (phần 2)</string>
    <string name="titleBCFunction">Hàm con</string>
    <string name="titleBCArray1">Mảng 1 chiều (phần 1)</string>
    <string name="titleBCArray2">Mảng 1 chiều (phần 2)</string>
    <string name="titleBCString">Chuỗi</string>
    <!--    -->


    <string name="exp">
        <ul>
            <li>Ví dụ :</li>
        </ul>
    </string>

    <string name="conclusion">
        * <u>TỔNG KẾT:</u>
    </string>

    <string name="exampleResult">
        <ul>
            <li>Kết quả khi thực thi:</li>
        </ul>
    </string>

    <!--    BASIC : input - output -->
    <string name="BC_IO_about">
        <ul>
            <li>Trong bài này, chúng ta sẽ bắt đầu làm quen với 2 hàm
                <b>
                    <i>printf()</i>
                </b>
                và
                <b>
                    <i>scanf()</i>
                </b>
                để thực hiện các thao tác nhập xuất từ bàn phím.
            </li>
        </ul>
    </string>

    <string name="BC_IO_printf">
        * <u>Hàm printf()</u>:
    </string>

    <string name="BC_IO_example1">
        <ul>
            <li>Ví dụ 1: in dòng <b>Hello World!</b> ra màn hình</li>
        </ul>
    </string>

    <string name="BC_IO_dedangnhanthay">
        <ul>
            <li>Dễ dàng nhận thấy:</li>
        </ul>
    </string>

    <string name="BC_IO_insideDDNT1">
        - Ta có thể sử dụng hàm <b>printf()</b>
        <i>
            <font fgcolor='#FFFF3B30'>dùng để in 1 câu lệnh bất kì ra màn hình..</font>
        </i>
    </string>

    <string name="BC_IO_insideDDNT2">
        - Khai báo thư viện <b>stdio.h</b> dùng từ khóa <b>#include</b> để sử dụng các hàm nhập xuất.
    </string>

    <string name="BC_IO_insideDDNT3">
        - Cấu trúc của 1 chương trình C cơ bản gồm <b>khai báo thư viện</b>, hàm <b>int main()</b>
        và <b>return 0</b>.
    </string>

    <string name="BC_IO_example2">
        <ul>
            <li>Ví dụ 2:</li>
        </ul>
    </string>

    <string name="BC_IO_insideDDNT4">
        => <b>"\\n"</b>\t: xuống dòng.
    </string>

    <string name="BC_IO_insideDDNT5">
        => <b>"\\t"</b>\t: lùi 1 khoảng tab.
    </string>

    <string name="BC_IO_scanf">
        * <u>Hàm scanf()</u>:
    </string>

    <string name="BC_IO_example3">
        <ul>
            <li>Ví dụ 3:</li>
        </ul>
    </string>

    <string name="BC_IO_scanfAge">
        - Hàm <b>scanf()</b>
        <i>
            <font fgcolor='#FFFF3B30'>dùng để đọc dữ liệu người dùng nhập từ bàn phím.</font>
        </i>
        Ở ví dụ trên, hàm <b>scanf()</b> dùng để đọc số tuổi của người dùng nhập, sau đó hàm <b>printf()</b>
        dùng để in ra số tuổi vừa nhập sử dụng <b>%d</b>.\n\n- Dòng <b>int age</b> dùng để khai báo biến age kiểu số nguyên (integer).
        Phần này các bạn chỉ cần quan tâm hàm <b>scanf()</b>.
    </string>

    <string name="BC_IO_conclusionDetail">
        - <b>printf()</b>\t\t\: in 1 câu lệnh bất kì ra màn hình.\n
        - <b>scanf()</b>\t\t: đọc dữ liệu người dùng nhập.\n
        - <b>\\n</b>\t\t\t\t\t\t\t: xuống 1 dòng.\n
        - <b>\\t</b>\t\t\t\t\t\t\t: lùi vào 1 tab.\n
        - <b>stdio.h</b>\t\t: thư viện dùng để nhập xuất.\n
        - <b>Cấu trúc của 1 chương trình C cơ bản</b>.
    </string>

    <!--    BASIC : input - output -->


    <!--    DataType - Biến -->
    <string name="BC_DataType_about">
        <ul>
            <li>Trong bài này, chúng ta sẽ tìm hiểu về
                <b>
                    <i>cách khai báo biến</i>
                </b>
                và
                <b>
                    <i>kiểu dữ liệu của biến</i>
                </b>
            </li>
        </ul>
    </string>

    <string name="BC_DataType_syntax">
        <font fgcolor='#B50F5C'>
                <b>*
                    <i>
                        <u>
                            Syntax (cú pháp)
                        </u>
                    </i>:
                </b>
        </font>
        <i>&lt;Kiểu dữ liệu&gt; tên biến;</i>
    </string>

    <string name="BC_DataType_expSyntax">
        -\tint a;\n-\tdouble b;\n-\tchar c;\n-\t&#8230;
    </string>

    <string name="BC_DataType_xembang">
        - 3 biến a, b, c được khai báo với các kiểu dữ liệu khác nhau (int, double, char). Xem bảng bên dưới để biết thêm
        <i>
            <font fgcolor='#FFFF3B30'>những kiểu dữ liệu phổ biến</font>
        </i>
        trong lập trình C nhé!
    </string>

    <string name="BC_DataType_popular">
        * <u>Các kiểu dữ liệu phổ biến thường gặp trong C</u>:
    </string>

    <string name="BC_DataType_int">
        * <u>Kiểu int</u>:
    </string>

    <string name="BC_DataType_intDetail">
         - <b>Int</b> là chữ viết tắt của <b>Integer</b>, đây là
            <i>
                <font fgcolor='#FFFF3B30'>kiểu số nguyên âm hoặc nguyên dương và không có giá trị thập phân</font>
            </i>.
    </string>

    <string name="BC_DataType_float_double">
        * <u>Kiểu float và double</u>:
    </string>

    <string name="BC_DataType_float_double_detail">
        - Đây là
            <i>
                <font fgcolor='#FFFF3B30'>kiểu số thực, dùng để chứa những số có dấu phẩy động.</font>
            </i>
        Ví dụ 2.5 và 5.6 là những số thực.\n
        - Câu hỏi đặt ra là sự khác nhau giữa float và double là gì?
        Về tính chất thì cả hai giống nhau, chỉ khác nhau về kích thước như sau:\n\t\t

         <ul>
            <li>
                <b>
                    <i>float có kích thước 4 bytes</i>
                </b>
            </li>
        </ul>
        \n\t\t
                 <ul>
            <li>
                <b>
                    <i>double có kích thước 8 bytes</i>
                </b>
            </li>
        </ul>

    </string>

    <string name="BC_DataType_char">
        * <u>Kiểu char</u>:
    </string>

    <string name="BC_DataType_charDetail">
        - Kiểu char rất đặt biệt, nó
            <i>
                <font fgcolor='#FFFF3B30'>dùng để lưu trữ một ký tự bất kì, và ký tự đó phải ở định dạng chuỗi.</font>
            </i>
        \n- Vì vậy khi gán giá trị cho nó ta
        <u>
            phải dùng dấu nháy để bao quanh ký tự cần gán lại
        </u>(Vd: char kytu1 = \'a\', char kytu2 = \'x\').
    </string>

    <string name="BC_DataType_void">
        * <u>Kiểu void</u>:
    </string>

    <string name="BC_DataType_voidDetail">
         - Đây là kiểu dữ liệu khá đặt biệt, nó có ý nghĩa không là gì cả,
            <i>
                <font fgcolor='#FFFF3B30'>thường được dùng trong những function (hàm) không có giá trị trả về</font>
            </i>
        . Vấn đề này chúng ta sẽ học ở những bài tiếp theo nhé.
    </string>

    <string name="BC_DataType_short_long">
        * <u>Kiểu short và long</u>:
    </string>

    <string name="BC_DataType_long_Detail">
         - Nếu bạn muốn
            <i>
                <font fgcolor='#FFFF3B30'>lưu trữ một con số rất lớn</font>
            </i>
        và kiểu dữ liệu hiện tại không đáp ứng được thì hãy thêm từ khóa long vào lúc khai báo nhé. Ví dụ:
        <b>long</b> a;
        <b>long long</b> b;
        <b>long double</b> c;
    </string>

    <string name="BC_DataType_short_Detail">
         - Còn nếu bạn chắc chắn
            <i>
                <font fgcolor='#FFFF3B30'>số nguyên lưu trữ sẽ rất nhỏ nên không cần phải phí phạm kích thước thì hãy sư dụng từ khóa
                    <b>short</b> nhé. Ví dụ: <b>short</b> a.
                </font>
            </i>
    </string>

    <string name="BC_DataType_descipt_result">
        - Vì b và c là kiểu số thực nên hệ thống sẽ in ra màn hình dưới dạng số thực (có dấu phẩy).\n
        - Gán biến <b>kytu = \'H\'</b> nên hệ thống in ra H mà không cần nhập.\n
        - Lưu ý: sử dụng dấu
        <b>\"\/\/\" để comment 1 dòng hoặc \"/*Đoạn code cần comment...*/\" để comment nhiều dòng lệnh </b>
        không cần thiết lại (hoặc dùng để chú thích code), việc comment này rất quan trọng.
        <b>Giúp code tường minh hơn, người viết lâu quên và người đọc dễ hiểu code (clean code).</b>
    </string>

    <string name="BC_DataType_conclusion">
         - Trên là danh sách các kiểu dữ liệu thường dùng trong ngôn ngữ C, bạn phải nhớ kích thước và công dụng
        của từng kiểu để sau này sử dụng cho phù hợp nhé. Ví dụ muốn lưu trữ số nguyên thì dùng kiểu int, số
        thực thì kiểu float hoặc double, ký tự thì kiểu char.\n
        - Vẫn còn một số kiểu nâng cao nữa như: Mảng, Pointer, Structures nhưng ta sẽ học nó ở những bài nâng cao.
    </string>

    <!--    DataType - Biến -->


<!--    Toán tử     -->
    <string name="BC_operator_about">

        <ul>
            <li>Trong bài này, chúng ta sẽ tìm hiểu về
                <b>
                    <i>toán tử</i>
                </b>
                và
                <b>
                    <i>cách hoạt động của nó. Một toán tử là một ký hiệu yêu cầu
                        trình biên dịch thực hiện các chức năng toán học hoặc logic cụ thể.</i>
                </b>
                Ngôn ngữ C có nhiều toán tử cài sẵn và cung cấp các loại toán tử sau:
            </li>
        </ul>
    </string>

    <string name="BC_operator_4operator">

        <font fgcolor='#FFFF3B30'>

        <ul>
            <li>\tToán tử số học (Arithmetic Operators).
            </li>
        </ul>

        \n
        <ul>
            <li>\tToán tử quan hệ (Relational Operators).
            </li>
        </ul>

        \n
        <ul>
            <li>\tToán tử logic (Logical Operators).
            </li>
        </ul>

        \n
        <ul>
            <li>\tToán tử thay thế (Assignment Operators).
            </li>
        </ul>

        </font>
    </string>

    <string name="BC_operator_ab">
        - Nếu biến <i>A có giá trị là 10</i>, <i>biến B có giá trị là 20</i> thì kết quả sau khi sử dụng các toán tử sẽ như thế nào?
        Mời các bạn theo dõi các khái niệm và ví dụ cụ thế dưới đây:
    </string>

    <string name="BC_operator_Arithmetic">
        * <u>Toán tử số học (Arithmetic Operators)</u>:
    </string>

    <string name="BC_operator_Relational">
        * <u>Toán tử quan hệ (Relational Operators)</u>:
    </string>

    <string name="BC_operator_Logical">
        * <u>Toán tử logic (Logical Operators)</u>:
    </string>

    <string name="BC_operator_Assignment">
        * <u>Toán tử thay thế (Assignment Operators)</u>:
    </string>

    <string name="BC_operator_arithmetic_detail">
        - Ta có thể dễ dàng sử dụng toán tử bất kì để tính toán và đưa ra kết quả như ý muốn.\n\n
        - Tuy nhiên dòng 14 15 và 17 18 có chút đặc biệt khi sử dụng 2 toán tử ++ và --. Tại sao dòng 14 15 giá trị của a, b
        không thay đổi mặc dù đã ++ và --, còn dòng 17 18 giá trị a lại tăng thêm 2 mặc dù chỉ dùng 1 lần toán tử ++, b cũng
        tương tự như vậy?\n\n
        - <b><u>Giái thích</u>:</b>
        <i>
            <font
                fgcolor='#FFFF3B30'>a++ và ++a là hoàn toàn khác nhau.
            </font>
        </i>
         Dòng 14 dùng a++ thì chương trình sẽ in ra màn hình trước (lúc này biến a vẫn là 40) rồi sau đó mới thực hiện phép toán a++ (lúc này biến a = 41).
         Dòng 17 dùng ++a thì chương trình sẽ thực hiện phép toán ++a trước (lúc này a đang 41 thực hiện cộng 1 thì a = 42) rồi
        sau đó mới in ra màn hình (a = 42).
           <i>
            <font
                fgcolor='#FFFF3B30'>Tóm lại a++ thì chương trình sẽ thực hiện phép toán ++ sau cùng (in ra màn hình rồi mới cộng), ngược lại ++a thì sẽ được ưu
                tiên thực hiện phép toán trước tiên (cộng xong rồi mới in ra màn hình).
            </font>
        </i>
        \n\n- Tương tự với toán tử --.
    </string>

    <string name="BC_operator_Relational_detail">
        - Vì a = 40, b = 15 nên chỉ thỏa điều kiện a>b và a>=b nên chương trình chỉ in ra màn hình 2 dòng tương ứng.
    </string>

    <string name="BC_operator_conclusion">
        - Trong môn toán cần các phép toán cộng trừ nhân chia để tính toán giữa các số hạng, biểu thức,... Điều này về bản chất
        là tương đồng với
        <b>
            toán tử trong lập trình. Dùng để tính toán chương tình theo ý muốn
        của lập trình viên.
        </b>
        \n
        - Tùy trường hợp mà sử dụng đúng toán tử để thực hiện các phép tính.
    </string>
<!--    Toán tử     -->

<!--    Rẽ nhánh-->
    <string name="BC_condition_about">

        <ul>
            <li>Trong bài này, chúng ta sẽ tìm hiểu về
                <b>
                    <i>cấu trúc rẽ nhánh</i>
                </b>
                và
                <b>
                    <i>cách hoạt động của nó.</i>
                </b>
                cụ thể ở đây là câu lệnh <b><i>if</i></b>, <b><i>if-else</i></b> và <b><i>switch-case</i></b>.
            </li>
        </ul>
    </string>

    <string name="BC_condition_notion">

        <ul>
            <li>
                Mệnh đề if được
                <b>
                    <i>
                        dùng để kiểm tra một biểu thức điều kiện có đúng hay không,
                        nếu đúng thì các câu lệnh bên trong mệnh đề if sẽ được thực thi.
                    </i>
                </b>
            </li>
        </ul>
    </string>

    <string name="BC_condition_title_ifelse">
        * <u>if-else</u>:
    </string>

    <string name="BC_condition_title_sw">
        * <u>switch-case</u>:
    </string>

    <string name="BC_condition_syntax">
        <font fgcolor='#B50F5C'>
                <b>*
                    <i>
                        <u>
                            Syntax (cú pháp)
                        </u>
                    </i>:\n
                </b>
        </font>\tif( điều kiện )\n
        \t\t{\n\t\t <i>\t//code...</i>\n\t\t}\n
        \t\telse( ngược lại với điều kiện )\n
        \t\t{\n\t\t <i>\t//code...</i>\n\t\t}
    </string>

    <string name="exp_if_else_1">
        <ul>
            <li>Ví dụ 1:</li> Nhập 1 số nguyên và kiểm tra đó là số nguyên âm hay nguyên dương?
        </ul>
    </string>

    <string name="exp_if_else_2">
        <ul>
            <li>Ví dụ 2:</li> Nhập 1 số nguyên và kiểm tra đó là số chẵn hay lẻ? (dựa vào điều kiện chia hết cho 2)
        </ul>
    </string>

    <string name="exp_if_else_3">
        <ul>
            <li>Ví dụ 3:</li> Nhập 3 số nguyên bất kì sau đó kiểm tra 3 số vừa nhập có tạo nên 1 tam giác hay không? Nếu có thì
            đó là tam giác gì? (dựa vào điều kiện: tổng 2 cạnh trong 1 tam giác luôn lớn hơn cạnh còn lại. Và các điều kiện
            để tạo nên các tam giác vuông, đều, cân, tù, nhọn).
        </ul>
    </string>

    <string name="BC_condition_syntax_switch_case">
        <font fgcolor='#B50F5C'>
                <b>*
                    <i>
                        <u>
                            Syntax (cú pháp)
                        </u>
                    </i>:\n
                </b>
        </font>\tswitch( biến cần kiểm tra )\n
        \t\t{\n
            \t\t\tcase (trường hợp 1):<i>\n\t\t\t\t\t//code...</i>\n\t\t\t\t\t\t\t\tbreak;\n
            \t\t\tcase (trường hợp 2):<i>\n\t\t\t\t\t//code...</i>\n\t\t\t\t\t\t\t\tbreak;\n
            \t\t\tcase (trường hợp 3):<i>\n\t\t\t\t\t//code...</i>\n\t\t\t\t\t\t\t\tbreak;\n
            \t\t\tcase (trường hợp n):<i>\n\t\t\t\t\t//code...</i>\n\t\t\t\t\t\t\t\tbreak;\n
            \t\t\tdefault: (mặc định):<i>\n\t\t\t\t\t//code...</i>\n
        \t\t}
    </string>

    <string name="BC_condition_about_switch_case">
        - Lệnh switch case là một cấu trúc điều khiển và rẽ nhánh hoàn toàn có thể được thay
        thế bằng cấu trúc if else. Tuy nhiên, việc sử dụng
           <font
                fgcolor='#FFFF3B30'>
               switch case sẽ giúp code của chúng ta
                dễ viết và dễ đọc hơn. Một điều nữa là sử dụng switch case có vẻ như cho hiệu năng tốt hơn
                so với sử dụng if else trong trường hợp có nhiều điều kiện có thể xảy ra.
           </font>
    </string>

    <string name="exp_sw_1">
        <ul>
            <li>Ví dụ 1:</li> Nhập 1 phép toán (cộng trừ nhân chia) và 2 số nguyên từ bàn phìm. Tính toán 2 số nguyên đó dựa trên phép toán vừa nhập?
            (dùng if else để bắt lỗi người dùng nhập sai phép toán).
        </ul>
    </string>

    <string name="exp_sw_2">
        <ul>
            <li>Ví dụ 2:</li> Nhập năm, nhập tháng sau đó kiểm tra tháng vừa nhập của năm đó có bao nhiêu ngày?
            ( dùng if else để kiểm tra năm nhuận).
        </ul>
    </string>

    <string name="BC_condition_explain_sw">
        <u>Lưu ý</u>:
        <i>
            <font fgcolor='#FFFF3B30'>
                \n\t\t\t-%.2f dùng để lấy sau dấu phẩy 2 chữ số, tương tự nếu bạn muốn lấy sau dấu phẩy
                3, 4 chữ số thì dùng %.3f, %.4f.
                \n\t\t\t- Vì số nguyên chia số nguyên có thể xảy ra trường hợp kết quả là số thực. Nên ở đây ta phải
                ép kiểu cho kết quả của a/b về số thực bằng cách ép 1 trong 2 biến a hoặc b từ kiểu int sang kiểu float
                bằng cách (float)b hoặc (float)a.
            </font>
        </i>
    </string>

    <string name="BC_condition_conclusionDetail">
        - <b>if-else</b> dùng để rẽ nhánh chương trình, tức là kiểm tra điều kiện sau đó điều hướng thực thi
        chương trình theo đúng ý của lập trình viên mong muốn.\n
        - <b>switch-case</b> cũng tương tự nhưng dùng trong trường hợp có nhiều điều kiện cần phải kiểm tra.\n
        - Tùy theo yêu cầu từng bài toán hay từng phần mềm mà lập trình viên linh hoạt sử dụng rẽ nhánh để
        bài toán ngắn gọn dễ hiểu, chạy đúng luồng và đáp ứng đúng mục tiêu đề bài.
    </string>
<!--    Rẽ nhánh-->

<!--    vòng lặp for -->
    <string name="BC_loopfor_about1">
        <ul>
            <li>Giải sử, cần viết chương trình xuất các số từ 1 đến 10. Đơn giản là sử dụng 10 câu lệnh <b>printf()</b>
                Nhưng cần viết chương trình xuất các số từ 1 đến 1000. Sử dụng 1000 câu lệnh <b>printf()</b> thì sẽ là một
                pha xử lý thật “cồng kềnh”.
            </li>
        </ul>
    </string>

    <string name="BC_loopfor_about2">
        <ul>
            <li>Giải pháp là sử dụng cấu trúc lặp để thực hiện các công việc mang tính lặp lại khi thỏa mãn điều kiện nào đó.
                Có 3 lệnh lặp trong C là <b>for</b>, <b>while</b>, và <b>do-while</b>. Bài này sẽ giới thiệu cách sử dụng vòng lặp for.
            </li>
        </ul>
    </string>

    <string name="BC_loopfor_syntax">
        <font fgcolor='#B50F5C'>
                <b>*
                    <i>
                        <u>
                            Syntax (cú pháp)
                        </u>
                    </i>:
                </b>
        </font>
    </string>

    <string name="BC_loopfor_syntaxDetails">
        \n\t\t\tfor (&lt;khởi đầu&gt;; &lt;điều kiện lặp&gt;; &lt;bước nhảy&gt;)\n
            \t\t\t\t{\n\t\t\t\t //code...\n\t\t\t\t}
    </string>

    <string name="BC_loopfor_WorkingPrinciple">
        <font fgcolor='#B50F5C'>
                <b>*
                    <i>
                        <u>
                            Nguyên lý hoạt động
                        </u>
                    </i>:\n
                </b>
        </font>
        <font size="15">
        - <font fgcolor='#FFFF3B30'>&lt;khởi đầu&gt;</font> khởi tạo giá trị của biến và chỉ thực thi một lần duy nhất.
        Sau đó, nếu <font fgcolor='#FFFF3B30'>&lt;điều kiện lặp&gt;</font> đúng (true) thì thực thi các dòng lệnh trong vòng lặp for.
        Nếu <font fgcolor='#FFFF3B30'>&lt;điều kiện lặp&gt;</font> sai (false) thì kết thúc vòng lặp.\n

        \t- <font fgcolor='#FFFF3B30'>&lt;bước nhảy&gt;</font> sẽ thay đổi giá trị của biến lúc <font fgcolor='#FFFF3B30'>&lt;khởi đầu&gt;</font>. Giá trị của biến này
        sẽ được kiểm tra lại (kiểm tra <font fgcolor='#FFFF3B30'>&lt;điều kiện lặp&gt;</font>) sau mỗi lần lặp.
        </font>
    </string>

    <string name="bc_loopfor_exp1">
        <ul>
            <li>Ví dụ 1:</li> in ra màn hình các số tự nhiên từ 1 tới 5.
        </ul>
    </string>

    <string name="bc_loopfor_exp2">
        <ul>
            <li>Ví dụ 2:</li> tính tổng các số tự nhiên từ 1 tới 10.
        </ul>
    </string>

    <string name="bc_loopfor_exp3">
        <ul>
            <li>Ví dụ 3:</li> tính tổng các số tự nhiên chẵn từ 1 tới 10 (dùng if để kiểm tra số chẵn).
        </ul>
    </string>

    <string name="bc_loopfor_exp4">
        <ul>
            <li>Ví dụ 4:</li> in ra bảng cửu chương từ 2 tới 4 (dùng 2 vòng for lòng nhau).
        </ul>
    </string>

    <string name="bc_loopfor_exp4_explain">
        \t\t- Dùng 3 lần for để in ra 3 bảng cửu chương 2, 3, 4. Nhưng nếu đề bài yêu cầu in ra 10 bảng cửu chương
        từ 1 đến 10 thì dùng 10 vòng for chăng? Cách đó vẫn đúng, chương trình vẫn chạy nhưng không khả quan
        và sẽ khiến code của bạn trở nên dài dòng, cồng kềnh.\n
        \t\t- Bản chất của việc in bảng cưu chương từ 2 đến 4 cũng chỉ là <b>1 công việc được lặp lại nhiều lần</b> nên
        bạn có quyền sử dụng vòng for. Bạn có thể thay đổi các thông số trong 2 vòng lặp trên và xem kết quả có gì
        khác biệt!\n
        \t\t- <font fgcolor='#FFFF3B30'>
                cấu trúc for lồng
                </font> được áp dụng rất nhiều vào các bài toán khó và cả các project thực tế nên các bạn lưu ý nhé!
    </string>

    <string name="BC_forloop_conclusionDetail">
        - <b>Vòng lặp for</b> dùng để thực thi 1 công việc lặp đi lặp lại nhiều lần.\n
        - Lưu ý 3 thành phần của 1 vòng for (<u><i>khởi đầu</i></u>, <u><i>điều kiện lặp</i></u>, <u><i>bước nhảy</i></u>)
        để tránh trường hợp vòng lặp bị lặp vô tận.\n
        - <b>Cấu trúc for lồng</b> rất quan trọng và được dùng rất nhiều, cần nắm rõ!
    </string>
<!--    vòng lặp for -->

<!--    while, do-while -->
    <string name="BC_loopwhile_dowhile_about">
        <ul>
            <li>Trong bài học này chúng ta sẽ cũng học về vòng lặp, nhưng mà là vòng lặp <b>while</b> và  <b>do while</b>
                Nhắc lại một tí thì <u>vòng lặp dùng để thực hiện những việc tương tự nhau nhưng lặp đi lặp lại nhiều lần.</u>
            </li>
        </ul>
    </string>

    <string name="BC_loopwhile_title">
        * <u>Vòng lặp while</u>:
    </string>

    <string name="BC_loopwhile_syntax">
        <font fgcolor='#B50F5C'>
                <b>*
                    <i>
                        <u>
                            Syntax (cú pháp)
                        </u>
                    </i>:
                </b>
        </font>\n\n
        <i>\t\t\twhile( điều kiện )\n\t\t\t{\n\t\t\t\t\t //code...\n\t\t\t}</i>
    </string>

    <string name="BC_loopwhile_explain_syntax">
        <font fgcolor='#FFFF3B30'>
        - Nếu <i>điều kiện</i> đúng\t\t => còn lặp.\n
        \t- Nếu <i>điều kiện</i> sai\t\t\t\t\t => thoát vòng lặp.
        </font>
    </string>

    <string name="bc_loopwhile_exp1">
        <ul>
            <li>Ví dụ 1:</li> in ra màn hình các số chẵn từ 1 tới 10.
        </ul>
    </string>

    <string name="bc_loopwhile_exp2">
        <ul>
            <li>Ví dụ 2:</li> tính tổng các số lẻ từ 1 tới 20.
        </ul>
    </string>

    <string name="BC_loopdowhile_title">
        * <u>Vòng lặp do-while</u>:
    </string>

    <string name="BC_loopdowhile_syntax">
        <font fgcolor='#B50F5C'>
                <b>*
                    <i>
                        <u>
                            Syntax (cú pháp)
                        </u>
                    </i>:
                </b>
        </font>\n\n
        <i>\t\t\tdo\n\t\t\t{\n\t\t\t\t\t //code...\n\t\t\t}while( điều kiện );</i>
    </string>

    <string name="BC_loopdowhile_explain_syntax">
        <font fgcolor='#FFFF3B30'>
        - Khối lệnh trong <b>do</b> được thực hiện trước.\n
        \t- Sau đó kiểm tra <i>điều kiện</i> trong <b>while</b>, nếu đúng => lặp lại, nếu sai => thoát vòng lặp.\n
            \t- Tức là <b>chạy code trước rồi kiểm tra điều kiện sau</b>.
        </font>
    </string>

    <string name="bc_loopdowhile_exp1">
        <ul>
            <li>Ví dụ 1:</li> nhập vào 1 số lẻ lớn hơn 0. Nếu nhập sai thì tiếp tục nhập lại!
        </ul>
    </string>

    <string name="bc_loopdowhile_exp2">
        <ul>
            <li>Ví dụ 2:</li> nhập vào số n bất kì, tính tổng từ 1 đến n. Sau đó kiểm tra tổng nếu lớn hơn
            1000 thì dừng, nếu tổng vẫn nhỏ hơn 1000 thì nhập lại n và tính toán tiếp.
        </ul>
    </string>

    <string name="BC_loopwhile_dowhile_conclusionDetail">
        - <b>Vòng lặp while thường được sử dụng để lặp đi lặp lại một khối lệnh không biết trước số lần lặp</b>.\n
        - <b>Vòng lặp do-while</b> khá giống với vòng lặp while. Tuy nhiên, nó có 1 điểm khác biệt đó là <b>vòng lặp do-while
        sẽ chạy phần thân lặp ít nhất 1 lần dù cho điều kiện có đúng hay sai. Bởi vì
        vòng lặp do-while kiểm tra điều kiện lặp sau khi thực hiện công việc.</b>\n
        - Bên cạnh vòng lặp for thì đây cũng là 2 cấu trúc vòng lặp khác được sử dụng nhiều trên thực tế.
        Tùy vào bài toán và mục đích chúng ta sẽ sử dụng loại vòng lặp sao cho phù hợp. Tất nhiên là 3 vòng
        lặp này <b>đôi lúc có thể thay thế lẫn nhau</b>, nhưng việc dùng phù hợp sẽ cho code bạn sáng sủa và dễ đọc hơn.
    </string>
<!--    while, do-while -->



<!--    hàm con-->
    <string name="BC_function_about1">
        <ul>
            <li>Trong bài học này chúng ta cùng tìm hiểu về <b>hàm trong C</b> (tên gọi khác là <b>chương trình con</b>).
                Lý do tại sao dùng hàm, cách gọi hàm ở trong ngôn ngữ C và cách hoạt động của một chương trình
                có sử dụng các hàm con.
            </li>
        </ul>
    </string>

    <string name="BC_function_about2">
        - <b><i><u>Đặt vấn đề</u></i></b>: Giả sử bạn muốn xây dựng một công ty (một chương trình máy tính bỏ túi). Công ty của bạn được thành
          lập với 4 mục tiêu chính như sau: tính tổng, hiệu, tích, thương của 2 số nguyên nhập từ bàn phím.\n
        - Nếu công ty của bạn chỉ có một thành viên và thành viên đó phải tự làm và quản lý hết tất cả 4 công việc
        trên (code tất cả trong hàm main()) - Điều này là hoàn toàn khả thi. Nhưng bạn thử nghĩ xem, một mình bạn
        ôm cả 4 công việc đó thì liệu bạn có thể quản lý nó được tốt không? bạn có thể dành thời gian để tối ưu và
        phát triển mỗi công việc đó không? Bạn nghĩ sao nếu những lúc căng thẳng khiến bạn quên hoặc thực hiện nhầm
        công việc đáng ra mình cần làm?\n
        - <b><i><u>Giải pháp</u></i></b>: thuê 4 ông nhân viên về và trả lương cho họ, mỗi ông (hàm con) chỉ làm một việc duy nhất. Khi đó, công việc
        của sếp (là hàm main() ý) là quản lý các ông nhân viên này, khi nào cần thì gọi ông ý làm cho mình và nếu có
        vấn đề gì ở 1 công việc nào đó thì cứ lôi cổ ông nhân viên đó ra mà xử lý.\n
        <font fgcolor='#FFFF3B30'>
        => Hàm chính là các ông nhân viên trong vấn đề phía trên. Trong lập trình, hàm là các khối code nhỏ chỉ thực
        hiện một chức năng nhất định của bài toán lớn.\n\n\n
        </font>
        - Bạn có thể hình dung bài toán trên như sau:
    </string>

    <string name="bc_function_exp1">
        <ul>
            <li>Ví dụ 1:</li> tính tổng hiệu tích thương của 2 số a b được nhập từ bàn phím (sử dụng hàm con).
        </ul>
    </string>

    <string name="BC_function_exp1detail">
        - Lưu ý: ta chỉ nên sử dụng <b>hàm con</b>
        <i>
            <font fgcolor='#FFFF3B30'>để thực hiện 1 và chỉ duy nhất 1 công việc.</font>
        </i>
        để dễ dàng quản lý giữa các hàm con với nhau.\n
        - 4 hàm ở ví dụ 1 được gọi là
        <i>
            <font fgcolor='#FFFF3B30'>hàm có tham số (cụ thể là 2 tham số a và b)</font>
        </i>
        và cũng là
        <i>
            <font fgcolor='#FFFF3B30'>hàm có giá trị trả về (vì khai báo hàm kiểu int và float)</font>
        </i>
        với từ khóa <i>int</i> hoặc <i>float</i>.\n
        <i>
            <font fgcolor='#FFFF3B30'>- Hàm có giá trị trả về bắt buộc phải có lệnh return</font>.
        </i>
    </string>

    <string name="bc_function_exp2">
        <ul>
            <li>Ví dụ 2:</li> in ra màn hình các số lẻ và các số chẵn từ 1 đến 10 (sử dụng hàm con).
        </ul>
    </string>

    <string name="BC_function_exp2detail">
        - 2 hàm <b>inSoLe()</b> và <b>inSoChan()</b> được gọi là
                <i>
            <font fgcolor='#FFFF3B30'>hàm không tham số</font>
        </i>
        và cũng là
        <i>
            <font fgcolor='#FFFF3B30'>hàm không có giá trị trả về (vì khai báo hàm kiểu void)</font>
        </i>\n
        <i>
            <font fgcolor='#FFFF3B30'>- Hàm không giá trị trả về không cần lệnh return</font>.
        </i>
    </string>

    <string name="bc_function_exp3">
        <ul>
            <li>Ví dụ 3:</li> nhập n từ bàn phím, tính tổng các số từ 1 đến n và trung bình cộng từ 1 đến n (sử dụng hàm con).
        </ul>
    </string>

    <string name="BC_function_exp3detail">
        - Chú ý:
        <i>
            <font fgcolor='#FFFF3B30'>trong hàm con có thể gọi lại hàm con chứ không chỉ duy nhất trong main() mới được gọi.</font>
        </i>\n
        - Ở đây theo logic tính trung bình cộng thì các bạn phải tính tổng sau đó đem chia cho tất cả các số.
        Hàm tính tổng đã có ở trên mà đi code lại, điều đó rất mất thời gian và sẽ khiến code trở
        nên lằng nhằng. Vì vậy ở hàm <b>trungBinhCong(</b> ta được phép gọi lại hàm <b>tong()</b>. Đây là 1 điều thực sự rất thú vị của việc
        lập trình và giúp code của chúng ta mạch lạc, ngắn gọi xúc tích và dễ hiểu.
    </string>

    <string name="BC_function_conclusionDetail">
        - Sử dụng chương trình con khiến code của bạn trông sáng sủa hơn và gọn gàng, người đọc code sẽ dễ hiểu hơn bằng cách nhìn vào
        từng hàm con ta có thể dễ dàng xác định vai trò của nó trong chương trình.\n
        - Dễ dàng quản lý, nâng cấp và tìm lỗi chương trình. Bởi vì bạn biết rõ hàm nào đang làm gì, nếu mà chẳng may gặp lỗi thì bạn cũng nhanh
        chóng xác định lỗi đó của hàm nào thay vì phải dò từng dòng trong hàm main.\n
        - Viết 1 lần và gọi được ở nhiều nơi: Khi bạn dùng hàm thì bạn chỉ phải viết một lần và gọi tới nó bất cứ khi nào bạn muốn.
        Bạn cũng có thể đóng gói các hàm đó để sử dụng cho các chương trình khác.
    </string>
<!--    hàm con-->

<!--    Mảng 1 chiều - phần 1 -->
    <string name="BC_arr1c1_about">
        <ul>
            <li>Trong bài này, chúng ta sẽ bắt đầu làm quen với
                <b>
                    <i>khái niệm mảng 1 chiều</i>
                </b>
                và
                <b>
                    <i>cách khai báo, khởi tạo và nhập xuất mảng 1 chiều cơ bản.</i>
                </b>
            </li>
        </ul>
    </string>

    <string name="BC_arr1c1_datvande">
        <ul>
            <li>Giả sử bạn muốn đưa 50 hành khách đi từ điểm A đến điểm B. Cách 1 bạn phải chở từng hành khách đi lần lượt,
                tức bạn phải đi 50 vòng thì mới hết 50 khách. Cách 2 bạn có thể thuê xe khách để đưa 1 lần 50 hành khách
                đi từ A đến B chỉ trong 1 chuyến.
            </li>
        </ul>
    </string>

    <string name="BC_arr1c1_giaiquyet">
        <ul>
            <li>Tương tự, trong lập trình bạn muốn khai báo 10, 15,... biến có cùng kiểu dữ liệu thì bạn
                phải khai báo 10, 15,... lần. Thì mảng sinh ra để giúp chúng ta tiết kiệm thời gian cũng như công sức,
                chỉ cần khai báo 1 mảng chứa 10, 15,... biến đó là mọi chuyện sẽ được giải quyết.
            </li>
        </ul>
    </string>

    <string name="BC_arr1c1_title_khainiem">
        * <u>Khái niệm</u>:
    </string>

    <string name="BC_arr1c1_khainiem">
        - Mảng là một tập hợp tuần tự các phần tử có cùng kiểu dữ liệu và các phần tử được lưu trữ trong một dãy các
        ô nhớ liên tục trên bộ nhớ. Các phần tử của mảng được truy cập bằng cách sử dụng chỉ số. Mảng có kích thước N
        sẽ có chỉ số từ 0 tới N - 1.\n
        - Ví dụ, với N = 5, khi đó chỉ số mảng (tiếng anh là index) sẽ có giá trị từ 0 tới 4 (5-1) tương ứng với 5 phần tử. Các phần tử trong mảng được truy cập bằng cách sử dụng
        <font fgcolor='#FFFF3B30'>
        <i>array_name[index]</i>
        </font>.
    </string>

    <string name="BC_arr1c1_syntax">
        <font fgcolor='#B50F5C'>
                <b>*
                    <i>
                        <u>Syntax (cú pháp)
                        </u>
                    </i>:
                </b>
        </font>
    </string>

    <string name="BC_arr1c1_syntaxdetail">
        <i>int arr[5]</i> (mảng tên <i>arr</i> chứa 5 phần tử kiểu int).
    </string>

    <string name="BC_arr1c1_thanhphan">
        <ul>
            <li>Việc khai báo mảng cần 2 thành phần:\n
            </li>
        </ul>
        \t- <b>Kích thước của mảng</b>: Việc này xác định số lượng phần tử có thể được lưu trữ trong mảng.\n
        \t\t\t- <b>Kiểu dữ liệu của mảng</b>: Việc này chỉ định kiểu dữ liệu của các phần tử trong mảng; là số nguyên,
        số thực, ký tự hay là kiểu dữ liệu nào đó.
    </string>

    <string name="BC_arr1c1_khoitao">
         <font fgcolor='#B50F5C'>
                <b>*
                    <i>
                        <u>Khởi tạo giá trị cho phần tử trong mảng
                        </u>
                    </i>:
                </b>
        </font>
    </string>

    <string name="BC_arr1c1_khoitao_detail">
        \t\t\t- Cách 1: khởi tạo ngay tại thời điểm khai báo mảng. Ví dụ: int arr[5] = {4, 12, 7, 15, 9};\n
        \t\t\t- Cách 2: khởi tạo sau khi khai báo mảng.
        \n\t\t\t\tVí dụ: int arr[5];\n\t\t\t\t\t\t\t\t\t\t\t\tarr[0] = 4;\n\t\t\t\t\t\t\t\t\t\t\t\tarr[1] = 12;
        \n\t\t\t\t\t\t\t\t\t\t\t\tarr[2] = 19;\n\t\t\t\t\t\t\t\t\t\t\t\tarr[3] = 2;\n\t\t\t\t\t\t\t\t\t\t\t\tarr[4] = 78;
    </string>

<!--    Mảng 1 chiều - phần 1 -->


</resources>